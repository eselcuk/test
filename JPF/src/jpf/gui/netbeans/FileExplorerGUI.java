/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jpf.gui.netbeans;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author zi05
 */
public class FileExplorerGUI extends javax.swing.JFrame {

    /**
     * Creates new form FileExplorerGUI
     */
    public FileExplorerGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jDialogFont = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        cboFont = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jSliderFontSize = new javax.swing.JSlider();
        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jPopupMenuBold = new javax.swing.JPopupMenu();
        popUpBold = new javax.swing.JCheckBoxMenuItem();
        popUpItalic = new javax.swing.JCheckBoxMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemOpen = new javax.swing.JMenuItem();
        jMenuItemClose = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuFormat = new javax.swing.JMenu();
        jCheckBoxMenuItemBold = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemItalic = new javax.swing.JCheckBoxMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSetcolor = new javax.swing.JMenuItem();
        jMenuItemSetbackcolor = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItemFont = new javax.swing.JMenuItem();
        jMenuInfo = new javax.swing.JMenu();
        jMenuItemAbout = new javax.swing.JMenuItem();

        jLabel1.setText("Font:");

        cboFont.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "academy engraved let", "algerian", "amaze", "arial", "arial black", "balthazar", "bankgothic lt bt", "bart", "bimini", "comic sans ms", "book antiqua", "bookman old style", "braggadocio", "britannic bold", "brush script mt", "century gothic", "century schoolbook", "chasm", "chicago", "colonna mt", "comic sans ms", "commercialscript bt", "coolsville", "courier", "courier new", "cursive", "dayton", "desdemona", "fantasy", "flat brush", "footlight mt light", "futurablack bt", "futuralight bt", "garamond", "gaze", "geneva", "georgia", "geotype tt", "helterskelter", "helvetica", "herman", "highlight let", "impact", "jester", "joan", "john handy let", "jokerman let", "kelt", "kids", "kino mt", "la bamba let", "lithograph", "lucida console", "map symbols", "marlett", "matteroffact", "matisse itc", "matura mt script capitals", "mekanik let", "monaco", "monospace", "monotype sorts", "ms linedraw", "new york", "olddreadfulno7 bt", "orange let", "palatino", "playbill", "pump demi bold let", "puppylike", "roland", "sans-serif", "scripts", "scruff let", "serif", "short hand", "signs normal", "simplex", "simpson", "stylus bt", "superfrench", "surfer", "swis721 bt", "swis721 blkoul bt", "symap", "symbol", "tahoma", "technic", "tempus sans itc", "terk", "times", "times new roman", "trebuchet ms", "trendy", "txt", "verdana", "victorian let", "vineta bt", "vivian", "webdings", "wingdings", "western", "westminster", "westwood let", "wide latin", "zapfellipt bt", "ACADEMY ENGRAVED LET", "ALGERIAN", "AMAZE", "ARIAL", "ARIAL BLACK", "BALTHAZAR", "BANKGOTHIC LT BT", "BART", "BIMINI", "COMIC SANS MS", "BOOK ANTIQUA", "BOOKMAN OLD STYLE", "BRAGGADOCIO", "BRITANNIC BOLD", "BRUSH SCRIPT MT", "CENTURY GOTHIC", "CENTURY SCHOOLBOOK", "CHASM", "CHICAGO", "COLONNA MT", "COMIC SANS MS", "COMMERCIALSCRIPT BT", "COOLSVILLE", "COURIER", "COURIER NEW", "CURSIVE", "DAYTON", "DESDEMONA", "FANTASY", "FLAT BRUSH", "FOOTLIGHT MT LIGHT", "FUTURABLACK BT", "FUTURALIGHT BT", "GARAMOND", "GAZE", "GENEVA", "GEORGIA", "GEOTYPE TT", "HELTERSKELTER", "HELVETICA", "HERMAN", "HIGHLIGHT LET", "IMPACT", "JESTER", "JOAN", "JOHN HANDY LET", "JOKERMAN LET", "KELT", "KIDS", "KINO MT", "LA BAMBA LET", "LITHOGRAPH", "LUCIDA CONSOLE", "MAP SYMBOLS", "MARLETT", "MATTEROFFACT", "MATISSE ITC", "MATURA MT", "MEKANIK LET", "MONACO", "MONOSPACE", "MONOTYPE SORTS", "MS LINEDRAW", "NEW YORK", "OLDDREADFULNO7 BT", "ORANGE LET", "PALATINO", "PLAYBILL", "PUMP DEMI BOLD LET", "PUPPYLIKE", "ROLAND", "SANS-SERIF", "SCRIPTS", "SCRUFF LET", "SERIF", "SHORT HAND", "SIGNS NORMAL", "SIMPLEX", "SIMPSON", "STYLUS BT", "SUPERFRENCH", "SURFER", "SWIS721 BT", "SWIS721 BLKOUL BT", "SYMAP", "SYMBOL", "TAHOMA", "TECHNIC", "TEMPUS SANS ITC", "TERK", "TIMES", "TIMES NEW ROMAN", "TREBUCHET MS", "TRENDY", "TXT", "VERDANA", "VICTORIAN LET", "VINETA BT", "VIVIAN", "WEBDINGS", "WINGDINGS", "WESTERN", "WESTMINSTER", "WESTWOOD LET", "WIDE LATIN", "ZAPFELLIPT BT" }));

        jLabel2.setText("Size:");

        jSliderFontSize.setMajorTickSpacing(6);
        jSliderFontSize.setMaximum(32);
        jSliderFontSize.setMinimum(6);
        jSliderFontSize.setMinorTickSpacing(1);

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialogFontLayout = new javax.swing.GroupLayout(jDialogFont.getContentPane());
        jDialogFont.getContentPane().setLayout(jDialogFontLayout);
        jDialogFontLayout.setHorizontalGroup(
            jDialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogFontLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jDialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialogFontLayout.createSequentialGroup()
                        .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel))
                    .addGroup(jDialogFontLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSliderFontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jDialogFontLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(cboFont, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jDialogFontLayout.setVerticalGroup(
            jDialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogFontLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jDialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboFont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jDialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jSliderFontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jDialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOK)
                    .addComponent(btnCancel)))
        );

        popUpBold.setText("Bold");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jCheckBoxMenuItemBold, org.jdesktop.beansbinding.ELProperty.create("${selected}"), popUpBold, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        popUpBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popUpBoldActionPerformed(evt);
            }
        });
        jPopupMenuBold.add(popUpBold);

        popUpItalic.setText("Italic");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jCheckBoxMenuItemItalic, org.jdesktop.beansbinding.ELProperty.create("${selected}"), popUpItalic, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        popUpItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popUpItalicActionPerformed(evt);
            }
        });
        jPopupMenuBold.add(popUpItalic);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea.setColumns(20);
        jTextArea.setRows(5);
        jTextArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea);

        jMenuFile.setText("File");

        jMenuItemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemOpen.setText("Open");
        jMenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemOpen);

        jMenuItemClose.setText("Close");
        jMenuItemClose.setEnabled(false);
        jMenuItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCloseActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemClose);
        jMenuFile.add(jSeparator1);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExit);

        jMenuBar1.add(jMenuFile);

        jMenuFormat.setText("Format");
        jMenuFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFormatActionPerformed(evt);
            }
        });

        jCheckBoxMenuItemBold.setText("Bold");
        jCheckBoxMenuItemBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemBoldActionPerformed(evt);
            }
        });
        jMenuFormat.add(jCheckBoxMenuItemBold);

        jCheckBoxMenuItemItalic.setText("Italic");
        jCheckBoxMenuItemItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemItalicActionPerformed(evt);
            }
        });
        jMenuFormat.add(jCheckBoxMenuItemItalic);
        jMenuFormat.add(jSeparator2);

        jMenuItemSetcolor.setText("Set color");
        jMenuItemSetcolor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSetcolorActionPerformed(evt);
            }
        });
        jMenuFormat.add(jMenuItemSetcolor);

        jMenuItemSetbackcolor.setText("Set back color");
        jMenuItemSetbackcolor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSetbackcolorActionPerformed(evt);
            }
        });
        jMenuFormat.add(jMenuItemSetbackcolor);
        jMenuFormat.add(jSeparator3);

        jMenuItemFont.setText("Font");
        jMenuItemFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFontActionPerformed(evt);
            }
        });
        jMenuFormat.add(jMenuItemFont);

        jMenuBar1.add(jMenuFormat);

        jMenuInfo.setText("Info");

        jMenuItemAbout.setText("About");
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        jMenuInfo.add(jMenuItemAbout);

        jMenuBar1.add(jMenuInfo);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Open File Dialog");
        int returnVal = fc.showDialog(this, "Open");
        switch (returnVal) {
            case JFileChooser.APPROVE_OPTION:
                File tekstfile = fc.getSelectedFile();
                BufferedReader buffer = null;
                try {
                    FileReader file = new FileReader(tekstfile);
                    buffer = new BufferedReader(file);
                    boolean eof = false;
                    String deVolledigeTekst = "";
                    while (!eof) {
                        try {
                            String eenLijn = buffer.readLine();
                            if (eenLijn == null) {
                                eof = true;
                            } else {
                                deVolledigeTekst += eenLijn;
                            }
                        } catch (IOException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        }
                        jTextArea.setText(deVolledigeTekst);
                        jMenuItemClose.setEnabled(true);
                    }
                } catch (FileNotFoundException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Error",
                            JOptionPane.ERROR_MESSAGE);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Error",
                            JOptionPane.ERROR_MESSAGE);
                } finally {
                    if (buffer != null) {
                        try {
                            buffer.close();
                        } catch (IOException e) {
                            System.out.println(e.getMessage());
                        }
                    }
                }
                break;
            case JFileChooser.CANCEL_OPTION:
                break;
            case JFileChooser.ERROR_OPTION:
                JOptionPane.showMessageDialog(this, "Error opening file...",
                        "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemOpenActionPerformed

    private void jMenuItemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCloseActionPerformed
        { // TODO add your handling code here: 
            jTextArea.setText("");
            jMenuItemClose.setEnabled(false);
        }
    }//GEN-LAST:event_jMenuItemCloseActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenuFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFormatActionPerformed

    }//GEN-LAST:event_jMenuFormatActionPerformed

    private void jCheckBoxMenuItemBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemBoldActionPerformed
        // TODO add your handling code here: 
        Font f = jTextArea.getFont();
        int style = f.getStyle();
        if (f.isBold()) {
            style -= Font.BOLD;
        } else {
            style += Font.BOLD;
        }
        Font newFont = f.deriveFont(style);
        jTextArea.setFont(newFont);
    }//GEN-LAST:event_jCheckBoxMenuItemBoldActionPerformed

    private void jCheckBoxMenuItemItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemItalicActionPerformed
        Font f = jTextArea.getFont();
        int style = f.getStyle();
        if (f.isItalic()) {
            style -= Font.ITALIC;
        } else {
            style += Font.ITALIC;
        }
        Font newFont = f.deriveFont(style);
        jTextArea.setFont(newFont);
    }//GEN-LAST:event_jCheckBoxMenuItemItalicActionPerformed

    private void jMenuItemSetcolorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSetcolorActionPerformed
        // TODO add your handling code here: 
        Color newColor = JColorChooser.showDialog(this, "Choose Foreground Color",
                jTextArea.getForeground());
        if (newColor != null) {
            jTextArea.setForeground(newColor);
        }
    }//GEN-LAST:event_jMenuItemSetcolorActionPerformed

    private void jMenuItemSetbackcolorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSetbackcolorActionPerformed
        // TODO add your handling code here: 
        Color newColor = JColorChooser.showDialog(this, "Choose Background Color",
                jTextArea.getBackground());
        if (newColor != null) {
            jTextArea.setBackground(newColor);
        }
    }//GEN-LAST:event_jMenuItemSetbackcolorActionPerformed

    private void jMenuItemFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFontActionPerformed
        // TODO add your handling code here: 
        jSliderFontSize.setValue(jTextArea.getFont().getSize());
        cboFont.setSelectedItem(jTextArea.getFont().getFamily());
        jDialogFont.pack();
        jDialogFont.setVisible(true);
    }//GEN-LAST:event_jMenuItemFontActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        // TODO add your handling code here: 
        Font f = jTextArea.getFont();
        Font nieuwFont = new Font(cboFont.getSelectedItem().toString(), f.getStyle(), jSliderFontSize.getValue());
        jTextArea.setFont(nieuwFont);
        jDialogFont.setVisible(false);
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        jDialogFont.setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        JOptionPane.showMessageDialog(this, "Dit is het derde Swing-met-NetBeans voorbeeld.",
                "About...", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    private void popUpBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popUpBoldActionPerformed
        jCheckBoxMenuItemBoldActionPerformed(evt);
    }//GEN-LAST:event_popUpBoldActionPerformed

    private void popUpItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popUpItalicActionPerformed
        jCheckBoxMenuItemItalicActionPerformed(evt);
    }//GEN-LAST:event_popUpItalicActionPerformed

    private void jTextAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextAreaMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON3) {
            jPopupMenuBold.show(this, (int) this.getMousePosition().getX(), (int) getMousePosition().getY());
        }       
    }//GEN-LAST:event_jTextAreaMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FileExplorerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FileExplorerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FileExplorerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FileExplorerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FileExplorerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JComboBox cboFont;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemBold;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemItalic;
    private javax.swing.JDialog jDialogFont;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuFormat;
    private javax.swing.JMenu jMenuInfo;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemClose;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemFont;
    private javax.swing.JMenuItem jMenuItemOpen;
    private javax.swing.JMenuItem jMenuItemSetbackcolor;
    private javax.swing.JMenuItem jMenuItemSetcolor;
    private javax.swing.JPopupMenu jPopupMenuBold;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JSlider jSliderFontSize;
    private javax.swing.JTextArea jTextArea;
    private javax.swing.JCheckBoxMenuItem popUpBold;
    private javax.swing.JCheckBoxMenuItem popUpItalic;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
